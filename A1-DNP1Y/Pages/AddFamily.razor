@page "/add-family"
@using A1_DNP1Y.Data.Impl
@using A1_DNP1Y.Data
@using A1_DNP1Y.Persistence
@using global::Models
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@inject IFamilyService FamilyService
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor.Buttons

<div class="col-lg-12 control-section">
<EditForm Model="@_newFamily" OnValidSubmit="@AddNewFamily" class="content-wrapper">
<ObjectGraphDataAnnotationsValidator/>

<div>
    <h2 class="font-weight-bold">Add A Family</h2>
    <p>Please enter details below to add a family</p>
    <hr/>
</div>

<div id="form-div" class="card p-4">
<h3>Address</h3>
<hr style="margin-bottom: 0"/>
<div class="row">
    <div class="col-xs-8 col-sm-8 col-lg-8 col-md-8">
        <SfTextBox @bind-Value="_newFamily.StreetName" Placeholder="Street Name" CssClass="e-bigger" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
        <ValidationMessage For="@(() => _newFamily.StreetName)"/>
    </div>
    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
        <SfNumericTextBox CssClass="e-bigger" @bind-Value="@_newFamily.HouseNumber" Min=0 FloatLabelType="@FloatLabelType.Auto"></SfNumericTextBox>
        <ValidationMessage For="@(() => _newFamily.HouseNumber)"/>
    </div>
</div>

@* ADULTS *@
<h3 class="mt-4">Adults:</h3>
<hr/>
@for (var i = 0; i < _newFamily.Adults.Count; i++)
{
    var index = i;
    var adult = _newFamily.Adults[index];

    <div class="card px-4 mb-4">

        <div class="row">
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <SfTextBox @bind-Value="adult.FirstName" Placeholder="First Name" CssClass="e-bigger" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                <ValidationMessage For="@(() => adult.FirstName)"/>
            </div>
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <SfTextBox @bind-Value="adult.LastName" Placeholder="Last Name" CssClass="e-bigger e-rtl" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                <ValidationMessage For="@(() => adult.LastName)"/>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <SfTextBox @bind-Value="adult.HairColor" Placeholder="Hair Color" CssClass="e-bigger" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                <ValidationMessage For="@(() => adult.HairColor)"/>
            </div>
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <SfTextBox @bind-Value="adult.EyeColor" Placeholder="Eye Color" CssClass="e-bigger e-rtl" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                <ValidationMessage For="@(() => adult.EyeColor)"/>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <SfComboBox TValue="string" TItem="SexFields" CssClass="e-bigger e-rtl" PopupHeight="230px" Placeholder="Sex" @bind-Value="adult.Sex" DataSource="@Sexes" FloatLabelType="@FloatLabelType.Auto">
                    <ComboBoxEvents TValue="string" TItem="SexFields"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="Text" Value="ID"></ComboBoxFieldSettings>
                </SfComboBox>
                <ValidationMessage For="@(() => adult.Sex)"/>
            </div>
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <SfTextBox @bind-Value="adult.JobTitle" Placeholder="Job Title" CssClass="e-bigger e-rtl" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                <ValidationMessage For="@(() => adult.JobTitle)"/>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                <div class="control-label">
                    Age (years)
                </div>
                <SfNumericTextBox CssClass="e-bigger" @bind-Value="adult.Age" Min=0 Max=125></SfNumericTextBox>
                <ValidationMessage For="@(() => adult.Age)"/>
            </div>
            <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                <div class="control-label">
                    Weight (kg)
                </div>
                <SfNumericTextBox CssClass="e-bigger" @bind-Value="adult.Weight" Min=1 Max=250></SfNumericTextBox>
                <ValidationMessage For="@(() => adult.Weight)"/>
            </div>
            <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                <div class="control-label">
                    Height (cm)
                </div>
                <SfNumericTextBox CssClass="e-bigger" @bind-Value="adult.Height" Min=30 Max=250></SfNumericTextBox>
                <ValidationMessage For="@(() => adult.Height)"/>
            </div>
        </div>

        <div class="d-flex justify-content-end mb-2">
            <SfButton CssClass="e-danger" type="button" @onclick="@(() => _newFamily.Adults.RemoveAt(index))">Remove Adult</SfButton>
        </div>
    </div>
}

<div class="d-flex justify-content-end mb-2">
    <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-round" IsPrimary="true" type="button" @onclick="@(() => _newFamily.Adults.Add(new Adult()))"></SfButton>
</div>

@* CHILDREN  *@
@if (_newFamily.Children.Count == 0 || _newFamily.Children.Count > 1)
{
    <h3 class="mt-2">Children:</h3>
}
else
{
    <h3 class="mt-2">Child:</h3>
}
<hr/>

@for (var i = 0; i < _newFamily.Children.Count; i++)
{
    var index = i;
    var child = _newFamily.Children[i];
    ListOfChildInterests.Add(new SfListBox<string[], Interest>());
    // Values.Add(new string[] {"Soccer"});
    Values.Add(new FormResponse());
    SfListBox<string[], Interest> localListBox = ListOfChildInterests[index];

    <div class="card px-4 mb-4">

        <div class="row">
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <SfTextBox @bind-Value="child.FirstName" Placeholder="First Name" CssClass="e-bigger" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                <ValidationMessage For="@(() => child.FirstName)"/>
            </div>
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <SfTextBox @bind-Value="child.LastName" Placeholder="Last Name" CssClass="e-bigger e-rtl" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                <ValidationMessage For="@(() => child.LastName)"/>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <SfTextBox @bind-Value="child.HairColor" Placeholder="Hair Color" CssClass="e-bigger" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                <ValidationMessage For="@(() => child.HairColor)"/>
            </div>
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <SfTextBox @bind-Value="child.EyeColor" Placeholder="Eye Color" CssClass="e-bigger e-rtl" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                <ValidationMessage For="@(() => child.EyeColor)"/>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <SfComboBox TValue="string" TItem="SexFields" CssClass="e-bigger e-rtl" PopupHeight="230px" Placeholder="Sex" @bind-Value="child.Sex" DataSource="@Sexes" FloatLabelType="@FloatLabelType.Auto">
                    <ComboBoxEvents TValue="string" TItem="SexFields"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="Text" Value="ID"></ComboBoxFieldSettings>
                </SfComboBox>
                <ValidationMessage For="@(() => child.Sex)"/>
            </div>
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <div class="control-label">
                    Age (years)
                </div>
                <SfNumericTextBox CssClass="e-bigger" @bind-Value="child.Age" Min=0 Max=125></SfNumericTextBox>
                <ValidationMessage For="@(() => child.Age)"/>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <div class="control-label">
                    Weight (kg)
                </div>
                <SfNumericTextBox CssClass="e-bigger" @bind-Value="child.Weight" Min=1 Max=250></SfNumericTextBox>
                <ValidationMessage For="@(() => child.Weight)"/>
            </div>
            <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                <div class="control-label">
                    Height (cm)
                </div>
                <SfNumericTextBox CssClass="e-bigger" @bind-Value="child.Height" Min=30 Max=250></SfNumericTextBox>
                <ValidationMessage For="@(() => child.Height)"/>
            </div>
        </div>

        <div class="row">
            <div style="width: 100%">
                <h4>Interests:</h4>
                <hr/>

                <SfListBox CssClass="interest-list" DataSource="@Interests" TItem="Interest" TValue="string[]" @ref=ListOfChildInterests[index] @bind-Value=@Values[index].Value>
                    <ListBoxSelectionSettings ShowCheckbox="true"></ListBoxSelectionSettings>
                    <ListBoxFieldSettings Text="Type" Value="Type"></ListBoxFieldSettings>
                </SfListBox>
            </div>
        </div>

        <h3 class="mt-2">Child Pets:</h3>
        <hr/>

        <div class=@(child.Pets.Count > 0 ? "card px-4 mb-4" : "")}>
            @for (var j = 0; j < child.Pets.Count; j++)
            {
                var petIndex = j;
                var pet = child.Pets[petIndex];

                <div class="card px-4 my-4">
                    <div class="row">
                        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                            <SfTextBox @bind-Value="pet.Name" Placeholder="Name" CssClass="e-bigger" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                            <ValidationMessage For="@(() => pet.Name)"/>
                        </div>
                        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                            <SfTextBox @bind-Value="pet.Species" Placeholder="Species" CssClass="e-bigger" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                            <ValidationMessage For="@(() => pet.Species)"/>
                        </div>
                        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                            <div class="control-label">
                                Age (years)
                            </div>
                            <SfNumericTextBox CssClass="e-bigger" @bind-Value="pet.Age" Min=0 Max=125></SfNumericTextBox>
                            <ValidationMessage For="@(() => pet.Age)"/>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end mb-2">
                        <SfButton CssClass="e-danger" type="button" @onclick="@(() => child.Pets.RemoveAt(petIndex))">Remove Child Pet</SfButton>
                    </div>
                </div>
            }


            <div class="d-flex justify-content-end mb-2">
                <SfButton IconCss="e-btn-sb-icons e-add-icon" type="button" CssClass="e-small e-round" IsPrimary="true" @onclick="@(() => child.Pets.Add(new Pet()))"></SfButton>
            </div>
        </div>


        <div class="d-flex justify-content-end mb-2 mt-2">
            <SfButton CssClass="e-danger" type="button" @onclick="@(() => _newFamily.Children.RemoveAt(index))">Remove Child</SfButton>
        </div>
    </div>
}

<div class="d-flex justify-content-end mb-2">
    <SfButton IconCss="e-btn-sb-icons e-add-icon" type="button" CssClass="e-small e-round" IsPrimary="true" @onclick="@(() => _newFamily.Children.Add(new Child()))"></SfButton>
</div>


<h3 class="mt-2">Family Pets:</h3>
<hr/>

<div class=@(_newFamily.Pets.Count > 0 ? "card px-4 mb-4" : "")}>
    @for (var j = 0; j < _newFamily.Pets.Count; j++)
    {
        var petIndex = j;
        var pet = _newFamily.Pets[petIndex];

        <div class="card px-4 my-4">
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox @bind-Value="pet.Name" Placeholder="Name" CssClass="e-bigger" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                    <ValidationMessage For="@(() => pet.Name)"/>
                </div>
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox @bind-Value="pet.Species" Placeholder="Species" CssClass="e-bigger" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                    <ValidationMessage For="@(() => pet.Species)"/>
                </div>
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <div class="control-label">
                        Age (years)
                    </div>
                    <SfNumericTextBox CssClass="e-bigger" @bind-Value="pet.Age" Min=0 Max=125></SfNumericTextBox>
                    <ValidationMessage For="@(() => pet.Age)"/>
                </div>
            </div>
            <div class="d-flex justify-content-end mb-2">
                <SfButton CssClass="e-danger" type="button" @onclick="@(() => _newFamily.Pets.RemoveAt(petIndex))">Remove Family Pet</SfButton>
            </div>
        </div>
    }


    <div class="d-flex justify-content-end mb-2">
        <SfButton IconCss="e-btn-sb-icons e-add-icon" type="button" CssClass="e-small e-round" IsPrimary="true" @onclick="@(() => _newFamily.Pets.Add(new Pet()))"></SfButton>
    </div>
</div>

</div>


<div class="col-xs-12 col-sm-12 col-lg-6 col-md-6 my-2">
    <SfButton IsPrimary="true" type="submit">Create Family</SfButton>
</div>

</EditForm>
</div>

<style>
.content-wrapper {
    width: 90%;
    margin: 0 auto;
    min-width: 85px;
}


.content-wrapper div.row {
    padding: 8px 0px;
}

.interest-list > ul{
display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
}


@@media only screen and (max-width: 480px) {
    .content-wrapper {
        width: 92%;
    }
    
    .content-wrapper div.row {
        padding: 0px;
    }
}
#description td {
    vertical-align: top;
}
.e-float-input,
.e-float-input.e-control-wrapper {
    margin-top: 0;
}
        
        
/*gae*/
#button-control .col-xs-12 {
    margin: 15px 0;
}
@@font-face {
    font-family: 'button-icons';
    src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
    font-weight: normal;
    font-style: normal;
}
.e-btn-sb-icons {
    font-family: 'button-icons';
    line-height: 1;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
.e-play-icon::before {
    content: '\e701';
}
.e-pause-icon::before {
    content: '\e705';
}
.e-open-icon::before {
    content: '\e70d';
}
.e-add-icon::before {
    content: '\e70a';
}        
       
        
</style>

@code {
    private Family _newFamily = new Family();

    public class SexFields
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }

    private List<SexFields> Sexes = new List<SexFields>()
    {
        new SexFields() {ID = "F", Text = "Female"},
        new SexFields() {ID = "M", Text = "Male"},
        new SexFields() {ID = "Other", Text = "Other"},
    };

    private List<Interest> Interests = new List<Interest>()
    {
        new Interest() {Type = "Soccer"},
        new Interest() {Type = "Drawing"},
        new Interest() {Type = "Kite Flying"},
        new Interest() {Type = "Roller Blades"},
        new Interest() {Type = "Board Games"},
        new Interest() {Type = "Ballet"},
        new Interest() {Type = "Hockey"},
        new Interest() {Type = "Gaming"},
        new Interest() {Type = "Lego"},
        new Interest() {Type = "Scout"},
        new Interest() {Type = "Gymnastics"},
        new Interest() {Type = "Harry Potter"},
        new Interest() {Type = "Frozen"}
    };

    // private string[] Value = new string[] {"Soccer"};
    public class FormResponse
    {
        public string[] Value { get; set; }
    }

    List<FormResponse> Values = new List<FormResponse>();
    List<SfListBox<string[], Interest>> ListOfChildInterests = new List<SfListBox<string[], Interest>>();


    protected async override Task OnInitializedAsync()
    {
    // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    // var user = authState.User;
    // Claim userClaim = user.FindFirst(claim => claim.Type.Equals("Id"));
    // newTodoItem.UserId = Convert.ToInt32(userClaim.Value);
    }

    private void AddNewFamily()
    {
        for (int i = 0; i < _newFamily.Children.Count; i++)
        {
            var localInterests = ListOfChildInterests[i].GetDataByValue(Values[i].Value);
            var child = _newFamily.Children[i];
            if (localInterests.Count != 0 && localInterests != null)
            {
                foreach (Interest li in localInterests)
                {
                    _newFamily.Children[i].ChildInterests.Add(new ChildInterest() {ChildId = child.Id, Child = child, InterestId = li.Type, Interest = new Interest() {Type = li.Type}});
                }
            }
        }
        FamilyService.AddFamily(_newFamily);
        NavigationManager.NavigateTo("/families");
    }

}