@page "/TodoList"
@using WebApplication.Data
@using WebApplication.Model
@inject ITodosService TodosService

<h3>TodoList</h3>
<div class="row d-flex justify-content-between align-items-center">
    <div class="col-md-4">
            Filter by User Id:
            @* @oninput="@((arg) => FilterByUserId(arg))" *@
            <input type="number" @bind="userIdfilter" style="width:50px"/>
    </div>

    <div class="col-md-4">
            Filter by completed status:
            @* @onchange="@((arg) => FilterByCompletedStatus(arg))" *@
            <select class="form-control selectpicker" style="width:100px" @bind="@isCompletedFilter">
                <option>False</option>
                <option>True</option>
                <option>Both</option>
            </select>
    </div>

    <div class="col-md-4">
        <button class="btn-info" type="button" @onclick="@((arg) => GetFilteredTodos(arg))">Get Filtered Todos</button>
    </div>
</div>

@if (allTodos == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!allTodos.Any())
{
    <p>
        <em>No ToDo items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th> <th>Todo ID</th> <th>Title</th> <th>Completed?</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in allTodos)
        {
            <tr>
                <td>@item.UserId</td>
                <td>@item.TodoId</td>
                <td style="text-decoration: @(item.IsCompleted ? "line-through" : "none")">@item.Title</td>
                <td>
                    <input type="checkbox" checked=@item.IsCompleted @onchange="@((arg) => CompletedChange(arg, item))"/>
                </td>
                <td>
                    <button @onclick=@(() => RemoveTodo(item.TodoId))>
                        <i class="oi oi-trash" style="color: red"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private IList<Todo> todosToShow;
    private IList<Todo> allTodos;
    // private int? filterById;
    // private bool? filterByIsCompleted;
    private int? userIdfilter = 1;
    private string isCompletedFilter = "Both";

    // private void FilterByUserId(ChangeEventArgs changeEventArgs)
    // {
    //     filterById = null;
    //     try
    //     {
    //         filterById = int.Parse(changeEventArgs.Value.ToString());
    //     }
    //     catch (Exception e)
    //     {
    //     }
    //     ExecuteFilter();
    // }
    //
    // private void FilterByCompletedStatus(ChangeEventArgs args)
    // {
    //     filterByIsCompleted = null;
    //     try
    //     {
    //         filterByIsCompleted = bool.Parse(args.Value.ToString());
    //     }
    //     catch (Exception e)
    //     {
    //     }
    //     ExecuteFilter();
    // }

    // private void ExecuteFilter()
    // {
    //     todosToShow = allTodos.Where(t =>
    //         (filterById != null && t.UserId == filterById || filterById == null) &&
    //         (filterByIsCompleted != null && t.IsCompleted == filterByIsCompleted || filterByIsCompleted == null)
    //         ).ToList();
    // }


    // protected override async Task OnInitializedAsync()
    // {
    //     allTodos = await TodosService.GetTodosAsync();
    //     todosToShow = allTodos;
    // }

    private void RemoveTodo(int todoId)
    {
        Todo todoToRemove = allTodos.First(t => t.TodoId == todoId);
        TodosService.RemoveTodoAsync(todoId);
        allTodos.Remove(todoToRemove);
    }

    private void CompletedChange(ChangeEventArgs evt, Todo todo)
    {
        todo.IsCompleted = (bool) evt.Value;
        TodosService.UpdateAsync(todo);
    }

    private async Task GetFilteredTodos(MouseEventArgs mouseEventArgs)
    {
        allTodos = await TodosService.GetTodosAsync(userIdfilter, isCompletedFilter);
        todosToShow = allTodos;
    }

}