@page "/AddTodo"
@using ToDoWAuth.Data
@using ToDoWAuth.Model
@using System.Security.Claims
@inject ITodosService TodoService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>AddTodo</h3>

<EditForm Model="@newTodoItem" OnValidSubmit="@AddNewTodo">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <AuthorizeView Policy="CanDeleteTodo">
        <Authorized Context="CanDelete">
            <div>
                Create a todo for yourself
            </div>
        </Authorized>
        <NotAuthorized Context="notCanDelete">
            <div class="form-group">
                User Id:<br/>
                <InputNumber @bind-Value="newTodoItem.UserId"/>
            </div>
        </NotAuthorized>
    </AuthorizeView>
    <div class="form-group">
        Title:<br/>
        <InputTextArea rows="4" @bind-Value="newTodoItem.Title"/>
    </div>
    <p class="actions">
        <button class="btn btn-outline-dark" type="submit">Create</button>
    </p>
</EditForm>

@code {
    private Todo newTodoItem = new Todo();

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Claim userClaim = user.FindFirst(claim => claim.Type.Equals("Id"));
        newTodoItem.UserId = Convert.ToInt32(userClaim.Value);
    }

    private void AddNewTodo()
    {
        TodoService.AddTodo(newTodoItem);
        NavigationManager.NavigateTo("/TodoList");
    }

}